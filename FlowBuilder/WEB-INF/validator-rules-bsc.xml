<?xml version="1.0" encoding="Shift_JIS" ?>
<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
<!--
 * ==================================================================
 * NO.83XXXXXX
 *
 * ITEM = 001 ; REV = 01 ; DATE '05/10/19
 *
 * (c) 2004 Yamatake Corporation  All Rights Reserved
 *
 * ORIGINAL SOURCE INFORMATION
 *
 * REVISION HISTORY
 *			REV.00 '04/11/26 BY. T.Okuyama (BSC)
 *			REV.01 '05/10/19 BY. T.Okuyama (BSC)
 *				dateEx, dateRangeを追加。
 * ==================================================================
-->
<!--
 このファイルは、/WEB-INFの下に配備してください。
 また、struts-config.xmlにて、下記のようにプラグインの設定を行なって
 ください。

      <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
        <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,
                                                  /WEB-INF/validation-rules-bsc.xml"/>
                                                  /WEB-INF/validation.xml"/>
      </plug-in>

 このValidatorの拡張では、以下のエラーメッセージを使用します。
 これらのキーをリソースファイル(ApplicationResources.properties)
 に加えるようにしてください。

   # Struts Validator Error Messages
   errors.maxbytes={0}は、全角{1}文字(半角{2}文字)以内で入力してください。
   errors.date={0}は、日付形式で入力してください。
   errors.range={0}は{1}〜{2}の範囲で入力してください。
-->

<form-validation>
	<global>
		<!--
			指定のバイト数以下であることをチェックする。半角文字は1バイト、
			全角文字は2バイトとしてカウントされる。
			半角文字は、ASCII文字および半角カタカナとする。
		-->
		<validator name="maxbytes"
			classname="jp.co.yamatake.ybs.ybscom.framework.validator.BscFieldChecks"
			method="validateMaxBytes"
			methodParams="java.lang.Object,
				org.apache.commons.validator.ValidatorAction,
				org.apache.commons.validator.Field,
				org.apache.struts.action.ActionErrors,
				javax.servlet.http.HttpServletRequest"
			depends=""
			msg="errors.maxbytes">
			<javascript><![CDATA[
				function validateMaxBytes(form)
				{
					var isValid = true;
					var focusField = null;
					var i = 0;
					var fields = new Array();
					oMaxBytes = new maxbytes();
					for (x in oMaxBytes)
					{
						var field = form[oMaxBytes[x][0]];
						if (field.type == 'text' || field.type == 'textarea')
						{
							var iMax = parseInt(oMaxBytes[x][2]("maxbytes"));
							var byteCount = calcBytes(field.value);
							if (byteCount > iMax)
							{
								if (i == 0)
								{
									focusField = field;
								}
								fields[i++] = oMaxBytes[x][1];
								isValid = false;
							}
						}
					}
					if (fields.length > 0)
					{
						focusField.focus();
						alert(fields.join('\n'));
					}
					return isValid;
				}

				function calcBytes(str)
				{
					var result = 0;
					for(var index = 0; index < str.length; index++)
					{
						if(isHankaku(str.charCodeAt(index)))
						{
							result++;
						}
						else
						{
							result++;
							result++;
						}
					}
					return result;
				}

				function isHankaku(ch)
				{
					var result = false;
					if(isAscii(ch) || isHalfWidthKatakana(ch))
					{
						result = true;
					}
					return result;
				}

				function isAscii(ch)
				{
					var result = false;
					if(0x0000 <= ch && ch <= 0x007F)
					{
						result = true;
					}
					return result;
				}

				function isHalfWidthKatakana(ch)
				{
					var result = false;
					if(0xFF61<= ch && ch <= 0xFF9F)
					{
						result = true;
					}
					return result;
				}]]>
			</javascript>
		</validator>

		<!--
			日付の形式をチェックする。
			標準の"date"のJavaScriptは、ルーズな日付形式（例えば 2005/1/1などの
			1月を"01"ではなく"1"と表記する形式）をサポートしていない。
			そこで、"dateEx"を作成した。
			"dateEx"は、年月日の区切り文字が存在する場合、ルーズな日付形式をサポートする。
			日付形式の指定は、以下のようにパターンの指定にて行う。
			(1)厳密な日付形式: datePatternStrict
			(2)ルーズな日付形式: datePattern
		-->
      <validator name="dateEx"
            classname="jp.co.yamatake.ybs.ybscom.framework.validator.BscFieldChecks"
               method="validateDateEx"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.date"
       jsFunctionName="DateValidationsEx">
         <javascript><![CDATA[
            function validateDateEx(form) {
               var bValid = true;
               var focusField = null;
               var i = 0;
               var fields = new Array();
               oDate = new DateValidationsEx();
               for (x in oDate) {
                   var value = form[oDate[x][0]].value;
                   var datePattern = oDate[x][2]("datePatternStrict");
                   var bStrict = true;
                   if (datePattern == null) {
                       var bStrict = false;
                       datePattern = oDate[x][2]("datePattern");
                   }
                   if ((form[oDate[x][0]].type == 'text' ||
                        form[oDate[x][0]].type == 'textarea') &&
                       (value.length > 0) &&
                       (datePattern.length > 0)) {
                     var MONTH = "MM";
                     var DAY = "dd";
                     var YEAR = "yyyy";
                     var orderMonth = datePattern.indexOf(MONTH);
                     var orderDay = datePattern.indexOf(DAY);
                     var orderYear = datePattern.indexOf(YEAR);
                     //MM dd yyyyパターンの場合
                     if ((orderDay < orderYear && orderDay > orderMonth)) {
                         var iDelim1 = orderMonth + MONTH.length;
                         var iDelim2 = orderDay + DAY.length;
                         //MM dd間の区切り文字を取得
                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                         //dd yyyy間の区切り文字を取得
                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                         //区切り文字なしの場合
                         if (iDelim1 == orderDay && iDelim2 == orderYear) {
                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
                         //MMとddの区切り文字なしの場合
                         } else if (iDelim1 == orderDay) {
                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
                         //ddとyyyyの区切り文字なしの場合
                         } else if (iDelim2 == orderYear) {
                            dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
                         //区切り文字ありの場合
                         } else {
                            if(bStrict == true) {
                               dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
                            } else {
                               dateRegexp = new RegExp("^(\\d{1,2})[" + delim1 + "](\\d{1,2})[" + delim2 + "](\\d{4})$");
                            }
                         }
                         var matched = dateRegexp.exec(value);
                         if(matched != null) {
                            if (!isValidDate(matched[2], matched[1], matched[3])) {
                               if (i == 0) {
                                   focusField = form[oDate[x][0]];
                               }
                               fields[i++] = oDate[x][1];
                               bValid =  false;
                            }
                         } else {
                            if (i == 0) {
                                focusField = form[oDate[x][0]];
                            }
                            fields[i++] = oDate[x][1];
                            bValid =  false;
                         }
                     //dd MM yyyyパターンの場合
                     } else if ((orderMonth < orderYear && orderMonth > orderDay)) {
                         var iDelim1 = orderDay + DAY.length;
                         var iDelim2 = orderMonth + MONTH.length;
                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                         if (iDelim1 == orderMonth && iDelim2 == orderYear) {
                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
                         } else if (iDelim1 == orderMonth) {
                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
                         } else if (iDelim2 == orderYear) {
                             dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
                         } else {
                             if(bStrict == true) {
                                 dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
                             } else {
                                 dateRegexp = new RegExp("^(\\d{1,2})[" + delim1 + "](\\d{1,2})[" + delim2 + "](\\d{4})$");
                             }
                         }
                         var matched = dateRegexp.exec(value);
                         if(matched != null) {
                             if (!isValidDate(matched[1], matched[2], matched[3])) {
                                 if (i == 0) {
                                     focusField = form[oDate[x][0]];
                                 }
                                 fields[i++] = oDate[x][1];
                                 bValid =  false;
                              }
                         } else {
                             if (i == 0) {
                                 focusField = form[oDate[x][0]];
                             }
                             fields[i++] = oDate[x][1];
                             bValid =  false;
                         }
                     //yyyy MM ddパターンの場合
                     } else if ((orderMonth > orderYear && orderMonth < orderDay)) {
                         var iDelim1 = orderYear + YEAR.length;
                         var iDelim2 = orderMonth + MONTH.length;
                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                         if (iDelim1 == orderMonth && iDelim2 == orderDay) {
                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})(\\d{2})$");
                         } else if (iDelim1 == orderMonth) {
                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})[" + delim2 + "](\\d{2})$");
                         } else if (iDelim2 == orderDay) {
                             dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})(\\d{2})$");
                         } else {
                            if(bStrict == true) {
                               dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{2})$");
                            } else {
                               dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{1,2})[" + delim2 + "](\\d{1,2})$");
                            }
                         }
                         var matched = dateRegexp.exec(value);
                         if(matched != null) {
                             if (!isValidDate(matched[3], matched[2], matched[1])) {
                                 if (i == 0) {
                                     focusField = form[oDate[x][0]];
                                  }
                                  fields[i++] = oDate[x][1];
                                  bValid =  false;
                              }
                          } else {
                              if (i == 0) {
                                  focusField = form[oDate[x][0]];
                              }
                              fields[i++] = oDate[x][1];
                              bValid =  false;
                          }
                     } else {
                         if (i == 0) {
                             focusField = form[oDate[x][0]];
                         }
                         fields[i++] = oDate[x][1];
                         bValid =  false;
                     }
                  }
               }
               if (fields.length > 0) {
                  focusField.focus();
                  alert(fields.join('\n'));
               }
               return bValid;
            }]]>
         </javascript>
      </validator>

		<!--
			日付の範囲をチェックする。
			minDate <= 日付 <= maxDateであるかを判定する。
		-->
      <validator name="dateRange"
            classname="jp.co.yamatake.ybs.ybscom.framework.validator.BscFieldChecks"
               method="validateDateRange"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.range"
       jsFunctionName="DateRangeValidations">
         <javascript><![CDATA[
            function validateDateRange(form) {
               var bValid = true;
               var focusField = null;
               var i = 0;
               var fields = new Array();
               oDate = new DateRangeValidations();
               for (x in oDate) {
                   var value = form[oDate[x][0]].value;
                   var datePattern = oDate[x][2]("datePatternStrict");
                   var bStrict = true;
                   if (datePattern == null) {
                       var bStrict = false;
                       datePattern = oDate[x][2]("datePattern");
                   }
                   if ((form[oDate[x][0]].type == 'text' ||
                        form[oDate[x][0]].type == 'textarea') &&
                       (value.length > 0) &&
                       (datePattern.length > 0)) {
                     var maxDate = oDate[x][2]("maxDate");
                     var minDate = oDate[x][2]("minDate");
                     var MONTH = "MM";
                     var DAY = "dd";
                     var YEAR = "yyyy";
                     var orderMonth = datePattern.indexOf(MONTH);
                     var orderDay = datePattern.indexOf(DAY);
                     var orderYear = datePattern.indexOf(YEAR);
                     //MM dd yyyyパターンの場合
                     if ((orderDay < orderYear && orderDay > orderMonth)) {
                         var iDelim1 = orderMonth + MONTH.length;
                         var iDelim2 = orderDay + DAY.length;
                         //MM dd間の区切り文字を取得
                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                         //dd yyyy間の区切り文字を取得
                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                         //区切り文字なしの場合
                         if (iDelim1 == orderDay && iDelim2 == orderYear) {
                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
                         //MMとddの区切り文字なしの場合
                         } else if (iDelim1 == orderDay) {
                            dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
                         //ddとyyyyの区切り文字なしの場合
                         } else if (iDelim2 == orderYear) {
                            dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
                         //区切り文字ありの場合
                         } else {
                            if(bStrict == true) {
                               dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
                            } else {
                               dateRegexp = new RegExp("^(\\d{1,2})[" + delim1 + "](\\d{1,2})[" + delim2 + "](\\d{4})$");
                            }
                         }
                         var matched = dateRegexp.exec(value);
                         if(matched != null) {
                            if (!isWithIn(matched[2], matched[1], matched[3], maxDate, minDate)) {
                               if (i == 0) {
                                   focusField = form[oDate[x][0]];
                               }
                               fields[i++] = oDate[x][1];
                               bValid =  false;
                            }
                         } else {
                            if (i == 0) {
                                focusField = form[oDate[x][0]];
                            }
                            fields[i++] = oDate[x][1];
                            bValid =  false;
                         }
                     //dd MM yyyyパターンの場合
                     } else if ((orderMonth < orderYear && orderMonth > orderDay)) {
                         var iDelim1 = orderDay + DAY.length;
                         var iDelim2 = orderMonth + MONTH.length;
                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                         if (iDelim1 == orderMonth && iDelim2 == orderYear) {
                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})(\\d{4})$");
                         } else if (iDelim1 == orderMonth) {
                             dateRegexp = new RegExp("^(\\d{2})(\\d{2})[" + delim2 + "](\\d{4})$");
                         } else if (iDelim2 == orderYear) {
                             dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})(\\d{4})$");
                         } else {
                             if(bStrict == true) {
                                 dateRegexp = new RegExp("^(\\d{2})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{4})$");
                             } else {
                                 dateRegexp = new RegExp("^(\\d{1,2})[" + delim1 + "](\\d{1,2})[" + delim2 + "](\\d{4})$");
                             }
                         }
                         var matched = dateRegexp.exec(value);
                         if(matched != null) {
                             if ( !isWithIn(matched[1], matched[2], matched[3], maxDate, minDate) ) {
                                 if (i == 0) {
                                     focusField = form[oDate[x][0]];
                                 }
                                 fields[i++] = oDate[x][1];
                                 bValid =  false;
                              }
                         } else {
                             if (i == 0) {
                                 focusField = form[oDate[x][0]];
                             }
                             fields[i++] = oDate[x][1];
                             bValid =  false;
                         }
                     //yyyy MM ddパターンの場合
                     } else if ((orderMonth > orderYear && orderMonth < orderDay)) {
                         var iDelim1 = orderYear + YEAR.length;
                         var iDelim2 = orderMonth + MONTH.length;
                         var delim1 = datePattern.substring(iDelim1, iDelim1 + 1);
                         var delim2 = datePattern.substring(iDelim2, iDelim2 + 1);
                         if (iDelim1 == orderMonth && iDelim2 == orderDay) {
                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})(\\d{2})$");
                         } else if (iDelim1 == orderMonth) {
                             dateRegexp = new RegExp("^(\\d{4})(\\d{2})[" + delim2 + "](\\d{2})$");
                         } else if (iDelim2 == orderDay) {
                             dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})(\\d{2})$");
                         } else {
                            if(bStrict == true) {
                               dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{2})[" + delim2 + "](\\d{2})$");
                            } else {
                               dateRegexp = new RegExp("^(\\d{4})[" + delim1 + "](\\d{1,2})[" + delim2 + "](\\d{1,2})$");
                            }
                         }
                         var matched = dateRegexp.exec(value);
                         if(matched != null) {
                             if ( !isWithIn(matched[3], matched[2], matched[1], maxDate, minDate) ) {
                                 if (i == 0) {
                                     focusField = form[oDate[x][0]];
                                  }
                                  fields[i++] = oDate[x][1];
                                  bValid =  false;
                              }
                          } else {
                              if (i == 0) {
                                  focusField = form[oDate[x][0]];
                              }
                              fields[i++] = oDate[x][1];
                              bValid =  false;
                          }
                     } else {
                         if (i == 0) {
                             focusField = form[oDate[x][0]];
                         }
                         fields[i++] = oDate[x][1];
                         bValid =  false;
                     }
                  }
               }
               if (fields.length > 0) {
                  focusField.focus();
                  alert(fields.join('\n'));
               }
               return bValid;
            }
			/*
				日付が範囲内であるかを判定する。
				minDate <= day, month, year <= maxDateのとき、true
			*/
			function isWithIn(day, month, year, maxDate, minDate)
			{
				var result = false;
				if( isGreaterEqualDate(day, month, year, minDate) && isLessEqualDate(day, month, year, maxDate) )
				{
					result = true;
				}
				return result;
			}
			/*
				日付が最小値(minDate)以上であるかを判定する。
				minDateは、yyyy/MM/dd形式とする。
			*/
			function isGreaterEqualDate(day, month, year, minDate)
			{
				var result = false;
				var minYear = getYear(minDate);
				var minMonth = getMonth(minDate);
				var minDay = getDay(minDate);
				if(minYear < year)
				{
					result = true;
				}
				else if( (minYear == year) && (minMonth < month) )
				{
					result = true;
				}
				else if( (minYear == year) && (minMonth == month) && (minDay <= day) )
				{
					result = true;
				}
				else
				{
					result = false;
				}
				return result;
			}
			/*
				日付が最大値(maxDate)以下であるかを判定する。
				maxDateは、yyyy/MM/dd形式とする。
			*/
			function isLessEqualDate(day, month, year, maxDate)
			{
				var result = false;
				var maxYear = getYear(maxDate);
				var maxMonth = getMonth(maxDate);
				var maxDay = getDay(maxDate);
				if(year < maxYear)
				{
					result = true;
				}
				else if( (year == maxYear) && (month < maxMonth) )
				{
					result = true;
				}
				else if( (year == maxYear) && (month == maxMonth) && (day <= maxDay) )
				{
					result = true;
				}
				else
				{
					result = false;
				}
				return result;
			}
			/*
				yyyy/MM/dd形式の日付から年(yyyy)を取り出す。
			*/
			function getYear(date)
			{
				var firstDelimIndex = date.indexOf("/");
				var year = date.substring(0, firstDelimIndex);
				return year;
				//return date.substring(0, firstDelimIndex);
			}
			/*
				yyyy/MM/dd形式の日付から月(MM)を取り出す。
			*/
			function getMonth(date)
			{
				var firstDelimIndex = date.indexOf("/");
				var secondDelimIndex = date.indexOf("/", firstDelimIndex + 1);
				var month = date.substring(firstDelimIndex + 1, secondDelimIndex);
				return month;
				//return date.substring(firstDelimIndex + 1, secondDelimIndex - 1);
			}
			/*
				yyyy/MM/dd形式の日付から日(dd)を取り出す。
			*/
			function getDay(date)
			{
				var firstDelimIndex = date.indexOf("/");
				var secondDelimIndex = date.indexOf("/", firstDelimIndex + 1);
				var day = date.substring(secondDelimIndex + 1, date.length);
				return day;
				//return date.substring(secondDelimIndex, date.length);
			}]]>
		</javascript>
	</validator>
	</global>
</form-validation>
